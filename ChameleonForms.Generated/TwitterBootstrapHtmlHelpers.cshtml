@* Generator: MvcHelper GeneratePrettyNames : true *@
@using Microsoft.AspNetCore.Html
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using ChameleonForms.Component.Config
@using ChameleonForms.Enums
@using Microsoft.AspNetCore.Mvc.Razor
@using ChameleonForms.Templates

@* The @:'s are to stop compilation errors with the Razor engine due to unclosed HTML tags *@

@helper EndForm() {
@:    </form>
}

@helper BeginSection(IHtmlContent heading, IHtmlContent leadingHtml, HtmlAttributes htmlAttributes) {
@:    <fieldset@(htmlAttributes)>
    if (heading != null && !string.IsNullOrWhiteSpace(heading.ToString()))
    {
    @:        <legend>@heading</legend>
    }
    if (leadingHtml != null && !string.IsNullOrWhiteSpace(leadingHtml.ToString()))
    {
    @:        @leadingHtml
    }
    }

    @helper EndSection() {
    @:    </fieldset>
    }

    @helper BeginNestedSection(IHtmlContent heading, IHtmlContent leadingHtml, HtmlAttributes htmlAttributes)
    {
    htmlAttributes.AddClass("panel panel-default");
    @:    <div@(htmlAttributes)>
        if (heading != null && !string.IsNullOrWhiteSpace(heading.ToString()))
        {
        @:        <div class="panel-heading">@heading</div>
        }

        @:        <div class="panel-body">
            if (leadingHtml != null && !string.IsNullOrWhiteSpace(leadingHtml.ToString()))
            {
            @leadingHtml
            }
            }

            @helper EndNestedSection() {
            @:
        </div>
        @:    </div>
        }

        @helper BeginField(IHtmlContent labelHtml, IHtmlContent elementHtml, IHtmlContent validationHtml, ModelMetadata fieldMetadata, IReadonlyFieldConfiguration fieldConfiguration, bool isValid, IHtmlContent requiredDesignator) {
        @BeginFieldInternal(labelHtml, elementHtml, validationHtml, fieldConfiguration, fieldMetadata, isValid, requiredDesignator)
        @:            <div class="row nested-fields">
            @:                <div class="col-xs-1"></div>
            @:                <div class="col-xs-11">
                }

                @helper EndField() {
                @:
            </div>
            @:
        </div>
        @:        </div>
        }

        @helper GetInputGroupHtml(IHtmlContent html, bool isInputGroup) {
        @(new HtmlString(isInputGroup ? "<div class=\"input-group-addon\">" : ""))@html@(new HtmlString(isInputGroup ? "</div>" : ""))
        }

        @helper GetPrependedHtml(IReadonlyFieldConfiguration fieldConfiguration, bool isInputGroup) {
        foreach (var html in fieldConfiguration.PrependedHtml) {@GetInputGroupHtml(html, isInputGroup)}
        }

        @helper GetAppendedHtml(IReadonlyFieldConfiguration fieldConfiguration, bool isInputGroup) {
        foreach (var html in fieldConfiguration.AppendedHtml) {@GetInputGroupHtml(html, isInputGroup)}
        }

        @helper GetHint(IReadonlyFieldConfiguration fieldConfiguration) {
        if (fieldConfiguration.Hint != null) {<div class="help-block form-hint">@fieldConfiguration.Hint</div>}
        }

        @helper GetPostElementRequiredDesignator(bool isRequired, bool displayDesignator, IHtmlContent requiredDesignator) {
        if (!isRequired) { return; }
        if (displayDesignator) {@requiredDesignator}
        }

        @helper GetInputGroupRequiredDesignator(bool isRequired, bool isInputGroup, IHtmlContent requiredDesignator) {
        if (!isRequired) { return; }
        if (isInputGroup) {<div class="input-group-addon required">@requiredDesignator</div>}
        }

        @helper RequiredDesignator(IReadonlyFieldConfiguration fieldConfiguration) {
        <em class="required" title="Required">&lowast;</em>
        }

        @helper GetLabelHtml(IHtmlContent labelHtml, bool hasLabel, bool isCheckboxControl, bool displayDesignator, bool isRequired, IHtmlContent requiredDesignator) {
        var wrapLabel = !hasLabel && !isCheckboxControl;
        if (wrapLabel) {
        @:<span class="control-label">
            }
            @labelHtml
            if (displayDesignator && isRequired) {
            @requiredDesignator
            }
            if (wrapLabel) {
            @:
        </span>
        }
        }

        @helper BeginFieldInternal(IHtmlContent labelHtml, IHtmlContent elementHtml, IHtmlContent validationHtml, IReadonlyFieldConfiguration fieldConfiguration, ModelMetadata fieldMetadata, bool isValid, IHtmlContent requiredDesignator) {
        var isCheckboxControl = fieldConfiguration.GetBagData<bool>
            ("IsCheckboxControl");
            var canBeInputGroup = fieldConfiguration.GetBagData<bool>
                ("CanBeInputGroup");
                var isRadioOrCheckboxList = fieldConfiguration.GetBagData<bool>
                    ("IsRadioOrCheckboxList");
                    var isRequired = fieldMetadata != null && fieldMetadata.IsRequired;
                    var isInputGroup = canBeInputGroup && (isRequired || fieldConfiguration.GetBagData<bool>
                        ("DisplayAsInputGroup"));
                        @:            <div class="@(isCheckboxControl ? "checkbox" : "form-group")@(!isValid ? " has-error" : string.Empty)@(RenderIfNotEmpty(fieldConfiguration.FieldContainerClasses,@<text> @fieldConfiguration.FieldContainerClasses</text>))">
                            @GetLabelHtml(labelHtml, fieldConfiguration.HasLabelElement, isCheckboxControl, isRadioOrCheckboxList || (!isCheckboxControl && !isInputGroup), isRequired, requiredDesignator)
                            if (isInputGroup)
                            {
                            @:            <div class="input-group">
                                }
                                @:            @GetPrependedHtml(fieldConfiguration, isInputGroup)@elementHtml@GetPostElementRequiredDesignator(isRequired, isCheckboxControl, requiredDesignator)@GetAppendedHtml(fieldConfiguration, isInputGroup)@GetInputGroupRequiredDesignator(isRequired, isInputGroup, requiredDesignator)
                                if (isInputGroup)
                                {
                                @:
                            </div>
                            }
                            @:            @GetHint(fieldConfiguration) @validationHtml
                            }

                            @helper Field(IHtmlContent labelHtml, IHtmlContent elementHtml, IHtmlContent validationHtml, ModelMetadata fieldMetadata, IReadonlyFieldConfiguration fieldConfiguration, bool isValid, IHtmlContent requiredDesignator) {
                            @BeginFieldInternal(labelHtml, elementHtml, validationHtml, fieldConfiguration, fieldMetadata, isValid, requiredDesignator)
                            @:
                        </div>
                        }

                        @helper BeginMessage(EmphasisStyle messageType, IHtmlContent heading) {
                        @:      <div class="panel @string.Format("panel-{0}", messageType.ToString().ToLower())">
                            if (!string.IsNullOrEmpty(heading.ToHtmlString()))
                            {
                            @:          <div class="panel-heading"><h4 class="panel-title">@heading</h4></div>
                            }
                            @:          <div class="panel-body">
                                }

                                @helper EndMessage() {
                                @:
                            </div>
                            @:
                        </div>
                        }

                        @helper BeginNavigation() {
                        @:        <div class="btn-group">
                            }

                            @helper EndNavigation() {
                            @:
                        </div>
                        }

                        @helper RadioOrCheckboxList(IEnumerable<IHtmlContent>
                            items, bool isCheckbox) {
                            foreach (var item in items) {
                            <div class="@(isCheckbox ? "checkbox" : "radio")">@item</div>
                            }
                            }

                            @* http://stackoverflow.com/questions/15160654/mvc-razor-helper-method-to-render-alternate-content-when-empty *@
                            @helper RenderIfNotEmpty(string mayBeEmpty, Func<object, IHtmlContent>
                                template) {
                                if (!string.IsNullOrEmpty(mayBeEmpty)) {@template(null)}
                                }
