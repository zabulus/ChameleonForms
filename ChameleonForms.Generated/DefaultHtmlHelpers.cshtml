@* Generator: MvcHelper GeneratePrettyNames : true *@
@using Microsoft.AspNetCore.Html
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using ChameleonForms.Component.Config
@using ChameleonForms.Enums
@using Microsoft.AspNetCore.Mvc.Razor
@using ChameleonForms.Templates

@* The @:'s are to stop compilation errors with the Razor engine due to unclosed HTML tags *@

@helper EndForm() {
@:    </form>
}

@helper BeginSection(IHtmlContent heading, IHtmlContent leadingHtml, HtmlAttributes htmlAttributes) {
@:    <fieldset@(htmlAttributes)>
    if (heading != null && !string.IsNullOrWhiteSpace(heading.ToString()))
    {
@:        <legend>@heading</legend>
    }
    if (leadingHtml != null && !string.IsNullOrWhiteSpace(leadingHtml.ToString()))
    {
@:        @leadingHtml
    }
@:        <dl>
}
    
@helper BeginNestedSection(IHtmlContent heading, IHtmlContent leadingHtml, HtmlAttributes htmlAttributes)
{
    if (heading != null && !string.IsNullOrWhiteSpace(heading.ToString()))
    {
@:            <dt>@heading</dt>
    }
@:            <dd>
    if (leadingHtml != null && !string.IsNullOrWhiteSpace(leadingHtml.ToString()))
    {
@:                @leadingHtml
    }
@:                <dl@(htmlAttributes)>
}

@helper EndSection() {
@:        </dl>
@:    </fieldset>
}

@helper EndNestedSection() {
@:                </dl>
@:            </dd>
}

@helper GetPrependedHtml(IReadonlyFieldConfiguration fieldConfiguration) {
    foreach (var html in fieldConfiguration.PrependedHtml) {@html}
}

@helper GetAppendedHtml(IReadonlyFieldConfiguration fieldConfiguration) {
    foreach (var html in fieldConfiguration.AppendedHtml) {@html}
}

@helper GetHint(IReadonlyFieldConfiguration fieldConfiguration) {
    if (fieldConfiguration.Hint != null) {<div class="hint">@fieldConfiguration.Hint</div>}
}

@helper BeginFieldInternal(IHtmlContent labelHtml, IHtmlContent elementHtml, IHtmlContent validationHtml, IReadonlyFieldConfiguration fieldConfiguration, ModelMetadata fieldMetadata, IHtmlContent requiredDesignator) {
@:            <dt>@labelHtml@(new HtmlString(fieldMetadata != null && fieldMetadata.IsRequired ? requiredDesignator.ToHtmlString() : ""))</dt>
@:            <dd@(RenderIfNotEmpty(fieldConfiguration.FieldContainerClasses,@<text> class="@fieldConfiguration.FieldContainerClasses"</text>))>
@:                @GetPrependedHtml(fieldConfiguration)@elementHtml@GetAppendedHtml(fieldConfiguration)@GetHint(fieldConfiguration) @validationHtml
}

@helper Field(IHtmlContent labelHtml, IHtmlContent elementHtml, IHtmlContent validationHtml, ModelMetadata fieldMetadata, IReadonlyFieldConfiguration fieldConfiguration, IHtmlContent requiredDesignator) {
@BeginFieldInternal(labelHtml, elementHtml, validationHtml, fieldConfiguration, fieldMetadata, requiredDesignator)
@:            </dd>
}

@helper BeginField(IHtmlContent labelHtml, IHtmlContent elementHtml, IHtmlContent validationHtml, ModelMetadata fieldMetadata, IReadonlyFieldConfiguration fieldConfiguration, IHtmlContent requiredDesignator)
{
@BeginFieldInternal(labelHtml, elementHtml, validationHtml, fieldConfiguration, fieldMetadata, requiredDesignator)
@:                <dl>
}

@helper EndField() {
@:                </dl>
@:            </dd>
}

@helper RequiredDesignator() {
<text> <em class="required">*</em></text>}

@helper BeginNavigation() {
@:        <div class="form_navigation">
}

@helper EndNavigation() {
@:        </div>
}

@helper BeginMessage(MessageType messageType, IHtmlContent heading) {
@:      <div class="@string.Format("{0}{1}", messageType.ToString().ToLower(), "_message")">
            if (!string.IsNullOrEmpty(heading.ToHtmlString()))
            {
@:          <h3>@heading</h3>
            }
@:          <div class="message">
}

@helper EndMessage() {
@:          </div>
@:      </div>
}

@helper MessageParagraph(IHtmlContent paragraph) {
@:    <p>
@:        @paragraph
@:    </p>
}

@helper RadioOrCheckboxList(IEnumerable<IHtmlContent> items) {
@:    <ul>
foreach(var i in items) {
@:        <li>@i</li>
}
@:    </ul>
}

@* http://stackoverflow.com/questions/15160654/mvc-razor-helper-method-to-render-alternate-content-when-empty *@
@helper RenderIfNotEmpty(string mayBeEmpty, Func<object, IHtmlContent> template) {
    if (!string.IsNullOrEmpty(mayBeEmpty)) {@template(null)}
}